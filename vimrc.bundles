""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => bundle 插件管理和配置项
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"非兼容vi模式。去掉讨厌的有关vi一致性模式，避免以前版本的一些bug和局限
set nocompatible
" configure Vundle
filetype off " required! turn off
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => 使用Vundle来管理插件
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" vim plugin bundle control, command model
" :BundleInstall     install 安装配置的插件
" :BundleInstall!    update  更新
" :BundleClean       remove plugin not in list 删除本地无用插件
Bundle 'gmarik/vundle'

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => 插件配置
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => a.vim 快速切换.h和.c文件
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Bundle 'a.vim'

" :A switches to the header file corresponding to the current file being edited (or vise versa)
" :AS splits and switches
" :AV vertical splits and switches
" :AT new tab and switches
" :AN cycles through matches
" :IH switches to file under cursor
" :IHS splits and switches
" :IHV vertical splits and switches
" :IHT new tab and switches
" :IHN cycles through matches
" <Leader>ih switches to file under cursor
" <Leader>is switches to the alternate file of file under cursor (e.g. on  <foo.h> switches to foo.cpp)
" <Leader>ihn cycles through matches

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => syntastic  多语言语法检查
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Bundle 'scrooloose/syntastic'
let g:syntastic_error_symbol='>>'
let g:syntastic_warning_symbol='>'
let g:syntastic_check_on_open=1
let g:syntastic_enable_highlighting = 1
" 最轻量
" let g:syntastic_python_checkers=['pyflakes'] " 使用pyflakes

" 中等
" error code: http://pep8.readthedocs.org/en/latest/intro.html#error-codes
let g:syntastic_python_checkers=['pyflakes', 'pep8'] " 使用pyflakes,速度比pylint快
let g:syntastic_python_pep8_args='--ignore=E501,E225,E124,E712'

" 重量级, 但是足够强大, 定制完成后相当个性化
" pylint codes: http://pylint-messages.wikidot.com/all-codes
" let g:syntastic_python_checkers=['pyflakes', 'pylint'] " 使用pyflakes,速度比pylint快
" let g:syntastic_python_checkers=['pylint'] " 使用pyflakes,速度比pylint快
" let g:syntastic_python_pylint_args='--disable=C0111,R0903,C0301'

let g:syntastic_javascript_checkers = ['jsl', 'jshint']
let g:syntastic_html_checkers=['tidy', 'jshint']
" 修改高亮的背景色, 适应主题
highlight SyntasticErrorSign guifg=white guibg=black

" to see error location list
let g:syntastic_always_populate_loc_list = 0
let g:syntastic_auto_loc_list = 0
let g:syntastic_loc_list_height = 5

function! ToggleErrors()
    let old_last_winnr = winnr('$')
    lclose
    if old_last_winnr == winnr('$')
        " Nothing was closed, open syntastic error location panel
        Errors
    endif
endfunction
nnoremap <Leader>s :call ToggleErrors()<cr>
" nnoremap <Leader>sn :lnext<cr>
" nnoremap <Leader>sp :lprevious<cr>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => YouCompleteMe  代码自动补全
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Bundle 'Valloric/YouCompleteMe'
" youcompleteme  默认tab  s-tab 和自动补全冲突
" let g:ycm_key_list_select_completion=['<c-n>']
" let g:ycm_key_list_select_completion = ['<Down>']
" let g:ycm_key_list_previous_completion=['<c-p>']

" let g:ycm_key_list_previous_completio:ProjectCreate <path-to-your-project> -n java 创建java project
let g:EclimCompletionMethos = 'omnifunc' " 使用Eclim进行自动补全(for java)
let g:ycm_confirm_extra_conf=0      " 关闭加载.ycm_extra_conf.py提示
let g:ycm_complete_in_comments = 1  "在注释输入中也能补全
let g:ycm_complete_in_strings = 1   "在字符串输入中也能补全
let g:ycm_collect_identifiers_from_tags_files=1                 " 开启 YCM 基于标签引擎
let g:ycm_collect_identifiers_from_comments_and_strings = 1   "注释和字符串中的文字也会被收入补全
let g:ycm_seed_identifiers_with_syntax=1   "语言关键字补全, 不过python关键字都很短，所以，需要的自己打开
let g:ycm_collect_identifiers_from_tags_files = 1
let g:ycm_min_num_of_chars_for_completion=2                     " 从第2个键入字符就开始罗列匹配项
" 引入，可以补全系统，以及python的第三方包 针对新老版本YCM做了兼容
" old version
if !empty(glob("~/.vim/bundle/YouCompleteMe/cpp/ycm/.ycm_extra_conf.py"))
    let g:ycm_global_ycm_extra_conf = "~/.vim/bundle/YouCompleteMe/cpp/ycm/.ycm_extra_conf.py"
endif
" new version
if !empty(glob("~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py"))
    let g:ycm_global_ycm_extra_conf = "~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py"
endif

" 跳转到定义处, 分屏打开
" let g:ycm_goto_buffer_command = 'horizontal-split'
let g:ycm_goto_buffer_command = 'vertical-split'
"mapping
nmap <leader>gd :YcmDiags<CR>
nnoremap <leader>gl :YcmCompleter GoToDeclaration<CR>           " 跳转到申明处
nnoremap <leader>gf :YcmCompleter GoToDefinition<CR>            " 跳转到定义处
nnoremap <leader>gg :YcmCompleter GoTo<CR>

" 直接触发自动补全
let g:ycm_key_invoke_completion = '<C-Space>'
" 黑名单,不启用
let g:ycm_filetype_blacklist = {
      \ 'tagbar' : 1,
      \ 'gitcommit' : 1,
      \}

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => YCM-Generator YouCompleteMe配置文件生成工具
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Bundle 'rdnetto/YCM-Generator'

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => ultisnips 代码片段快速插入
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Bundle 'SirVer/ultisnips'
" 代码片段资源,需要学习

" Snippets are separated from the engine. Add this if you want them:
Bundle 'honza/vim-snippets'

let g:UltiSnipsExpandTrigger       = "<C-E>"
let g:UltiSnipsJumpForwardTrigger  = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"
let g:UltiSnipsSnippetDirectories  = ['UltiSnips']
let g:UltiSnipsSnippetsDir = '~/.vim/UltiSnips'
" 定义存放代码片段的文件夹 .vim/UltiSnips下，使用自定义和默认的，将会的到全局，有冲突的会提示
" 进入对应filetype的snippets进行编辑
map <leader>us :UltiSnipsEdit<CR>

" ctrl+j/k 进行选择
func! g:JInYCM()
    if pumvisible()
        return "\<C-n>"
    else
        return "\<c-j>"
    endif
endfunction

func! g:KInYCM()
    if pumvisible()
        return "\<C-p>"
    else
        return "\<c-k>"
    endif
endfunction
inoremap <c-j> <c-r>=g:JInYCM()<cr>
au BufEnter,BufRead * exec "inoremap <silent> " . g:UltiSnipsJumpBackwordTrigger . " <C-R>=g:KInYCM()<cr>"
let g:UltiSnipsJumpBackwordTrigger = "<c-k>"

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => nerdtree 目录导航
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Bundle 'scrooloose/nerdtree'
map tr :silent! NERDTreeToggle<CR>
let NERDTreeHighlightCursorline=1
let NERDTreeIgnore=[ '\.pyc$', '\.pyo$', '\.obj$', '\.o$', '\.so$', '\.egg$', '^\.git$', '^\.svn$', '^\.hg$' ]
"let NERDTreeDirArrows=0
"let g:netrw_home='~/bak'
"close vim if the only window left open is a NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | end

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => tagbar 标签导航
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Bundle 'majutsushi/tagbar'
nmap tg :silent! :TagbarToggle<CR>
let g:tagbar_autofocus = 1

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => nerdcommenter 快速注释
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Bundle 'scrooloose/nerdcommenter'
map cc <leader>c<space>
let NERDShutUp=1
let NERDSpaceDelims=1     " 让注释符与语句之间留一个空格
let NERDCompactSexyComs=1 " 多行注释时样子更好看
let NERD_c_alt_style=1
let NERD_cpp_alt_style=1

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => vim-surround 快速加入修改环绕字符
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Bundle 'tpope/vim-surround'

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => vim-trailing-whitespace 快速去行尾空格 [, + <Space>]
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Bundle 'bronson/vim-trailing-whitespace'
map <leader><space> :FixWhitespace<cr>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => vim-easymotion 高效移动
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Bundle 'Lokaltog/vim-easymotion'
"let g:EasyMotion_startofline = 0 " keep cursor colum when JK motion
map <Leader><leader>h <Plug>(easymotion-linebackward)
map <Leader><Leader>j <Plug>(easymotion-j)
map <Leader><Leader>k <Plug>(easymotion-k)
map <Leader><leader>l <Plug>(easymotion-lineforward)
" 重复上一次操作, 类似repeat插件, 很强大
map <Leader><leader>. <Plug>(easymotion-repeat)

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => vim-multiple-cursors 多光标选中编辑
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Bundle 'terryma/vim-multiple-cursors'
let g:multi_cursor_use_default_mapping=0
" Default mapping
let g:multi_cursor_next_key='<C-m>'
let g:multi_cursor_prev_key='<C-p>'
let g:multi_cursor_skip_key='<C-x>'
let g:multi_cursor_quit_key='<Esc>'

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => ctrlp 文件搜索
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Bundle 'kien/ctrlp.vim'
" let g:ctrlp_map = '<leader>p'
" let g:ctrlp_cmd = 'CtrlP'
" map <leader>f :CtrlPMRU<CR>
set wildignore+=*/tmp/*,*.so,*.swp,*.zip     " MacOSX/Linux"
let g:ctrlp_custom_ignore = {
    \ 'dir':  '\v[\/]\.(git|hg|svn|rvm)$',
    \ 'file': '\v\.(exe|so|dll|zip|tar|tar.gz)$',
    \ }
"\ 'link': 'SOME_BAD_SYMBOLIC_LINKS',
let g:ctrlp_working_path_mode=0
let g:ctrlp_match_window_bottom=1
let g:ctrlp_max_height=15
let g:ctrlp_match_window_reversed=0
let g:ctrlp_mruf_max=500
let g:ctrlp_follow_symlinks=1

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => ack.vim 文件搜索
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Bundle 'ack.vim'

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => vim-fugitive Git外包插件
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Bundle 'tpope/vim-fugitive'
" " :Gdiff  :Gstatus :Gvsplit
" nnoremap <leader>ge :Gdiff<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => vim-gitgutter Git状态信息插件
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Bundle 'airblade/vim-gitgutter'
" let g:gitgutter_enabled = 1
" let g:gitgutter_highlight_lines = 1
" nnoremap <leader>gs :GitGutterToggle<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => gundo.vim 可以查看回到某个历史状态
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Bundle 'sjl/gundo.vim'
nnoremap gu :GundoToggle<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => vim-powerline 状态栏增强展示(vim-powerline和airline二选一)
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Bundle 'Lokaltog/vim-powerline'
" set t_Co=256       " Explicitly tell Vim that the terminal supports 256 colors
" set encoding=utf-8 " Necessary to show Unicode glyphs
" set guifont=PowerlineSymbols\ for\ Powerline
" let g:Powerline_symbols = 'fancy'

Bundle 'bling/vim-airline'
set laststatus=2
set t_Co=256       " Explicitly tell Vim that the terminal supports 256 colors
set encoding=utf-8
let g:airline_powerline_fonts=1
" let g:airline_theme="solarized"
let g:airline_theme="molokai"

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => solarized 主题
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Bundle 'altercation/vim-colors-solarized'
"let g:solarized_termcolors=256
" let g:solarized_termtrans=1
" let g:solarized_contrast="normal"
" let g:solarized_visibility="normal"

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => molokai 主题
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Bundle 'tomasr/molokai'
let g:molokai_original = 1
let g:rehash256 = 1

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => vim-markdown Markdown语法高亮
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Bundle 'plasticboy/vim-markdown'
let g:vim_markdown_folding_disabled=1

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => dash.vim dashAPI插件
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Bundle 'rizzatti/dash.vim'


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => minbufexpl插件
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Bundle 'fholgado/minibufexpl.vim'
hi MBENormal               guifg=#808080 guibg=fg
hi MBEChanged              guifg=#CD5907 guibg=fg
hi MBEVisibleNormal        guifg=#5DC2D6 guibg=fg
hi MBEVisibleChanged       guifg=#F1266F guibg=fg
hi MBEVisibleActiveNormal  guifg=#A6DB29 guibg=fg
hi MBEVisibleActiveChanged guifg=#F1266F guibg=fg
let g:miniBufExplMapWindowNavVim = 1
let g:miniBufExplMapWindowNavArrows = 1
let g:miniBufExplMapCTabSwitchBufs = 1
let g:miniBufExplModSelTarget = 1
" 解决FileExplorer窗口变小问题
let g:miniBufExplForceSyntaxEnable = 1
let g:miniBufExplorerMoreThanOne=2
let g:miniBufExplCycleArround=1
" 默认方向键左右可以切换buffer
nnoremap <TAB> :MBEbn<CR>
noremap <leader>bn :MBEbn<CR>
noremap <leader>bp :MBEbp<CR>
noremap <leader>bd :MBEbd<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => ranibow-parentheses插件 括号显示增强
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Bundle 'kien/rainbow_parentheses.vim'
" let g:rbpt_colorpairs = [
    " \ ['brown',       'RoyalBlue3'],
    " \ ['Darkblue',    'SeaGreen3'],
    " \ ['darkgray',    'DarkOrchid3'],
    " \ ['darkgreen',   'firebrick3'],
    " \ ['darkcyan',    'RoyalBlue3'],
    " \ ['darkred',     'SeaGreen3'],
    " \ ['darkmagenta', 'DarkOrchid3'],
    " \ ['brown',       'firebrick3'],
    " \ ['gray',        'RoyalBlue3'],
    " \ ['black',       'SeaGreen3'],
    " \ ['darkmagenta', 'DarkOrchid3'],
    " \ ['Darkblue',    'firebrick3'],
    " \ ['darkgreen',   'RoyalBlue3'],
    " \ ['darkcyan',    'SeaGreen3'],
    " \ ['darkred',     'DarkOrchid3'],
    " \ ['red',         'firebrick3'],
    " \ ]

" let g:rbpt_max = 16
" let g:rbpt_loadcmd_toggle = 0
" au VimEnter * RainbowParenthesesToggle
" au Syntax * RainbowParenthesesLoadRound
" au Syntax * RainbowParenthesesLoadSquare
" au Syntax * RainbowParenthesesLoadBraces

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => delimitMate插件 自动补全单引号，双引号等
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Bundle 'Raimondi/delimitMate'

"" for python docstring ",优化输入
au FileType python let b:delimitMate_nesting_quotes = ['"']
" 关闭某些类型文件的自动补全
"au FileType mail let b:delimitMate_autoclose = 0

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => closttag插件 自动补全html/xml标签
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Bundle 'docunext/closetag.vim'
let g:closetag_html_style=1

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => python语法检查
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" python fly check, 弥补syntastic只能打开和保存才检查语法的不足
Bundle 'kevinw/pyflakes-vim'
let g:pyflakes_use_quickfix = 0

" for python.vim syntax highlight
Bundle 'hdima/python-syntax'
let python_highlight_all = 1

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => nginx配置文件高亮
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Bundle 'evanmiller/nginx-vim-syntax'
